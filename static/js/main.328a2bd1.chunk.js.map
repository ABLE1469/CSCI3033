{"version":3,"sources":["components/AppHeader.js","LegacyPlatformUtilities.js","GlobalListContext.js","pages/Home.js","pages/AtomicAnalytics.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["StyledLink","styled","Link","AppHeader","AppBar","position","style","background","Toolbar","color","marginRight","fontSize","to","ConvertLegacyDataset","input","s","JSON","parse","slice","GlobalListContext","React","createContext","GlobalListProvider","state","columns","ColumnModel","globalList","setGlobalList","inp","setState","prevState","setColumns","arr","HEADERS","split","obj","push","String","handleClick","i","document","createElement","type","onchange","e","file","target","files","reader","FileReader","readAsText","onload","readerEvent","preventDefault","result","cols","gl","click","children","this","props","Provider","value","Component","HomePage","context","Typography","variant","align","dataSource","gridName","contextType","AAnalytics","AAnalytics_PDF","borderTop","textAlign","padding","left","bottom","height","width","phantom","display","Footer","ul","li","localData","OrderID","CustomerName","ShippedDate","ShipperCity","Amount","ListGroup","flexDirection","Button","onClick","Item","flex","withStyles","theme","main","spacing","breakpoints","down","classes","CssBaseline","className","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.328a2bd1.chunk.js","sourcesContent":["import React from 'react';\nimport Button from 'react-bootstrap/Button'\nimport {Link} from 'react-router-dom'\nimport styled from 'styled-components';\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n} from '@material-ui/core';\n//import { withStyles } from '@material-ui/core/styles';\n\nconst StyledLink = styled(Link)`\n    text-decoration: none;\n\n    &:focus, &:hover, &:visited, &:link, &:active {\n        text-decoration: none;\n    }\n`;\n\nconst AppHeader = () => (\n  <AppBar position=\"static\" style={{ background: '#2E3B55' }}>\n    <Toolbar style={{ color: \"white\" }}>\n      <StyledLink style={{ marginRight: 200, fontSize:\"2.0em\" }} to=\"/\">COMPMAD - v0.01</StyledLink>\n      <StyledLink style={{ marginRight: 16 }}  to=\"/analysis\">Analytics</StyledLink>\n    </Toolbar>\n  </AppBar>\n);\n\nexport default AppHeader;","function ConvertLegacyDataset(input) {\n    var s = JSON.parse(input)\n\n    //console.log(s.slice(1))\n    return [s.slice(0,1), s.slice(1)]\n}\n\nexport {ConvertLegacyDataset}","import React from 'react'\n\nimport { ColumnModel } from 'tubular-common';\nimport {ConvertLegacyDataset} from './LegacyPlatformUtilities'\n\nconst GlobalListContext = React.createContext()\n\nclass GlobalListProvider extends React.Component {\n    \n    // Context state\n    state = {\n        columns:[new ColumnModel(\"Formula\"),new ColumnModel(\"Energy without entropy per atom (eV)\"),\n                 new ColumnModel(\"Total energy per atom (eV)\"),new ColumnModel(\"Energy sigma->0 per atom (eV)\"),\n                 new ColumnModel(\"HOMO (eV)\"),new ColumnModel(\"LUMO (eV)\"),new ColumnModel(\"Band gap (eV)\"),\n                 new ColumnModel(\"xc-functional\"),new ColumnModel(\"file\"),new ColumnModel(\"info\"),\n                 new ColumnModel(\"Predicted oxidation number\")],\n        \n        globalList: [],\n    }\n  \n    // Method to update state\n    setGlobalList = inp => {\n        this.setState(prevState => ({ globalList: inp }))\n    }\n    setColumns = inp => {\n        var arr = inp[0].HEADERS.split(\",\")\n\n        const obj = []\n        for (var s of arr)\n        {\n            obj.push(new ColumnModel(String(s)))\n            //console.log(s)\n        }\n        //console.log(obj)\n        //TODO\n        //this.setState(prevState => ({ columns: obj}))\n    }\n\n    handleClick = i => {\n        var input = document.createElement('input');\n        input.type = 'file';\n    \n        input.onchange = e => { \n            // getting a hold of the file reference\n            var file = e.target.files[0]; \n\n            // setting up the reader\n            var reader = new FileReader();\n            reader.readAsText(file,'UTF-8');\n\n            // here we tell the reader what to do when it's done reading...\n            reader.onload = readerEvent => {\n                readerEvent.preventDefault();\n                var content = readerEvent.target.result; \n                var [cols, gl] = ConvertLegacyDataset(content)\n                this.setColumns(cols)\n                this.setGlobalList(gl)\n            }          \n        }\n\n        input.click();\n    }\n  \n    render() {\n      const { children } = this.props\n      const { globalList, columns } = this.state\n      const { setGlobalList, setColumns, handleClick } = this\n    \n      return (\n        <GlobalListContext.Provider\n          value={{\n            globalList,\n            columns,\n            setGlobalList,\n            setColumns,\n            handleClick\n          }}\n        >\n          {children}\n        </GlobalListContext.Provider>\n      )\n    }\n  }\n  \n  export default GlobalListContext\n  \n  export { GlobalListProvider }","import React, { Fragment, useContext } from 'react';\n//import ReactDOM from 'react-dom';\n\nimport { DataGrid } from 'tubular-react';\nimport GlobalListContext from '../GlobalListContext'\n\nimport {\n  Typography,\n} from '@material-ui/core';\n\n//const columns = [new ColumnModel('OrderID'), new ColumnModel('CustomerName'), new ColumnModel('ShippedDate'), new ColumnModel('ShipperCity'), new ColumnModel('Amount')];\n\nclass HomePage extends React.Component {\n    static contextType = GlobalListContext\n\n    render () {\n        const { globalList, columns } = this.context\n\n        return (<Fragment>   \n            <Typography variant=\"subtitle1\" align=\"center\">Data view</Typography>\n            <DataGrid columns={columns} dataSource={globalList} gridName=\"Grid\" />\n        </Fragment>)\n    }\n}\n\nexport default HomePage","import React from 'react';\nimport GlobalListContext from '../GlobalListContext'\nimport {Link} from 'react-router-dom'\n\nfunction calculatePDF()\n{\n    \n}\n\nclass AAnalytics extends React.Component  {\n    static contextType = GlobalListContext\n    \n    render () {\n        const { globalList, columns } = this.context\n        return(\n            <div>\n                <Link style={{ marginRight: 16 }} color=\"secondary\" to=\"/analysis/pdf\">\n                PDF\n                </Link>\n            </div>\n    )};\n}\n\nclass AAnalytics_PDF extends React.Component  {\n    static contextType = GlobalListContext\n    \n    render () {\n        const { globalList, columns } = this.context\n        return(\n            <div>\n                <Link style={{ marginRight: 16 }} color=\"secondary\">\n                PDFsdafv\n                </Link>\n            </div>\n    )};\n}\n \nexport {AAnalytics, AAnalytics_PDF};","import React, { useContext } from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup'\nimport Button from 'react-bootstrap/Button'\n//import ReactDOM from \"react-dom\";\nimport styled from \"styled-components\";\nimport GlobalListContext from '../GlobalListContext'\n\nvar style = {\n    //backgroundColor: \"#F8F8F8\",\n    borderTop: \"1px solid #E7E7E7\",\n    textAlign: \"center\",\n    padding: \"10px\",\n    position: \"fixed\",\n    left: \"0\",\n    bottom: \"0\",\n    height: \"60px\",\n    width: \"100%\",\n}\n\nvar phantom = {\n  display: 'block',\n  padding: '10px',\n  height: '60px',\n  width: '100%',\n}\n\nconst List = styled.ul`\n  overflow-x: auto;\n  list-style: none;\n  white-space: nowrap;\n  padding: 0;\n`;\n\nconst ListItem = styled.li`\n  display: inline-block;\n  background: red;\n  padding: 8px 16px;\n  margin-right: 16px;\n`;\n\nclass Footer extends React.Component {\n    static contextType = GlobalListContext\n    localData = [\n        {\n            OrderID: 1,\n            CustomerName: 'TT',\n            ShippedDate: '2016-03-19T19:00:00',\n            ShipperCity: 'Guadalajara, JAL, Mexico',\n            Amount: 300.0,\n        }]\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { handleClick } = this.context\n        return (\n            <div>\n                <div style={phantom} />\n                <div style={style}>\n                    {    \n                        <ListGroup style={{display: 'flex', flexDirection: 'row'}}>\n                            <Button type=\"file\" style={{padding: '8px 16px'}} variant=\"dark\" onClick={handleClick}>Select file</Button>\n                            <ListGroup.Item style={{flex: 1}}>\n                                I1\n                            </ListGroup.Item>\n                            <ListGroup.Item style={{flex: 1}}>\n                                I2\n                            </ListGroup.Item>\n                            <ListGroup.Item style={{flex: 1}}>\n                                I3\n                            </ListGroup.Item>\n                        </ListGroup>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Footer","import React, { Fragment } from 'react';\n\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport {\n  CssBaseline,\n  withStyles,\n} from '@material-ui/core';\n\nimport AppHeader from './components/AppHeader';\nimport HomePage from './pages/Home';\nimport {AAnalytics, AAnalytics_PDF} from './pages/AtomicAnalytics';\nimport Footer from './components/Footer';\nimport { GlobalListContext, GlobalListProvider } from './GlobalListContext'\n\nconst styles = theme => ({\n  main: {\n    padding: theme.spacing(3),\n    [theme.breakpoints.down('xs')]: {\n      padding: theme.spacing(2),\n    },\n  },\n});\n\n\nconst App = ({ classes }) => (\n  <HashRouter>\n    <CssBaseline />\n    <GlobalListProvider>\n      <AppHeader />\n          <main className={classes.main}>\n            <Switch>\n              <Route exact path=\"/\" component={HomePage}/>\n              <Route exact path=\"/analysis\" component={AAnalytics}/>\n              <Route exact path=\"/analysis/pdf\" component={AAnalytics_PDF}/>\n              \n            </Switch>\n          </main>\n      <Footer ></Footer>\n    </GlobalListProvider>\n  </HashRouter>\n);\n\nexport default withStyles(styles)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n//import Footer from './components/Footer';\nimport * as serviceWorker from './serviceWorker';\n//import 'node_modules/bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\nif (module.hot) module.hot.accept();"],"sourceRoot":""}